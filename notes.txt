
CS50 - Final Project: Game Backlog Management CLI

# 1 - Initial questions

## 1.1 - What will my software do?
	The CLI application will try to replicate a backlog system for video games. When young you 
have lots of time to play video games. So it doesn't matter as much if some games are still on
the shelf to be played. Nowadays, as an adult, you have a lot more responsibilities. Besides
work, one needs to spend time for daily tasks as simple as doing the dishes, maintaining a social
circle, doing courses to keep up to date for their field of work and the list goes on. Needless to say
there is not as much time left to spend on video games. This leaves lots of game lost on the shelf.

	This application will help to give structure to the process of playing video games. It will 
help maintain a list of games still on the backlog, games that are currently in the process of being played,
games that are finished and a wishlist. The plan is to add functionalities to show the lists on the CLI with 
dates when the item was added and tags/comments that were given to the item.

## 1.2 - What topics will I need to research?
	This CLI application will be written in the language of C. So I anticipate that some things I take 
for granted with other langues will be thought out on how to implement them. Some things that come to
mind are how to structure the command line commands, how to format tables on the interface, how to
use SQL in C (or is it best to use a csv file). 

# 2 - Items that need to be implemented

## 2.1 - Commands


	*add item 
		**will automatically be placed in backlog unless mentioned otherwise
		**what date was it added
		**what tags/comments were given
	*move item 
		**choose which list it will be placed in?
		**date it was moved
	*update item 
		**change the tags/comments
	*delete item
		**N/A
	*list items
		**choose field that should be listed
		**can be all
	*help function
		**will list all commands for the application
	*version command
			
# 3 - Branches

	*Master / open
	*build-command-structure / closed
	*2-create-linked-list-functionalities / closed
	*3-create-command-functions / open
	
# 4 - Log

## 20/02
	I started building on structuring the options that the CLI application will have. So far
I've mostly been working on figuring out how the getopt_long function works. I think the best way to
go forward is splitting the options with functions in order to make the validations for the command line 
input clear and easy to process. For example '--version' and '--help' don't need any further input, so
argc must always be equal to 2. In the case of the move option this results in an argc of 4 as you need to input
the game you want to move as well as where to move it. A couple seperate functions should make this more clean.

	Another thing I'm contemplating is chaning the option '--move' to '--update', because what you're actually
doing with this options is updating the status of the game entry. Last thing: possible custom type: 'gameEntry'? 
Something to think about. It would make it easier to structure the data that we're using.
	

# 5 - List of useful links

- https://eng.localytics.com/exploring-cli-best-practices/
	
			
			
		
